
localrules: BamDepth, SummarizeCheckM, PlotCheckM, PrepBatchFile, SummarizeResults, SummaryPlots, all

configfile: "config.yaml"

SAMPLES = config['samplenames']

rule all:
    input:
        expand("5-gtdb-individual/{sample}/{dir}/", sample = SAMPLES, dir = ["align", "classify", "identify"]),
        expand("6-summary/{sample}/{sample}-binplots/{sample}-{filt}-compl-vs-{type}.pdf", sample = SAMPLES, filt = ["unfiltered", "filtered"], type = ["contam", "contam-contigNums", "contam-Bins"]),
        expand("6-summary/{sample}/{sample}.HiFi-MAG.summary.txt", sample = SAMPLES),
        expand("6-summary/{sample}/{sample}.Completeness-Contamination-Contigs.pdf", sample = SAMPLES),
        expand("6-summary/{sample}/{sample}.GenomeSizes-Depths.pdf", sample = SAMPLES)

rule MinimapToBam:
    input:
        reads = "inputs/{sample}.fasta",
        contigs = "inputs/{sample}.contigs.fasta"
    output:
        "1-bam/{sample}.bam"
    conda:
        "envs/samtools.yml"
    threads: 
        config['minimap']['threads']
    log: 
        "logs/{sample}.MinimapToBam.log"
    benchmark: 
        "benchmarks/{sample}.MinimapToBam.tsv"
    shell:
        "minimap2 -a -k 19 -w 10 -I 10G -g 5000 -r 2000 --lj-min-ratio 0.5 "
        "-A 2 -B 5 -O 5,56 -E 4,1 -z 400,50 --sam-hit-only -t {threads} " 
        "{input.contigs} {input.reads} 2> {log} | samtools sort -@ {threads} -o {output}"
        
rule BamDepth:
    input:
        bam = "1-bam/{sample}.bam"
    output:
        "1-bam/{sample}.depth.txt"
    conda:
        "envs/metabat.yml"
    log:
        "logs/{sample}.BamDepth.log"
    benchmark: 
        "benchmarks/{sample}.BamDepth.tsv"
    shell:
        "jgi_summarize_bam_contig_depths --outputDepth {output} {input.bam} 2> {log}"

rule RunMetabat:
    input:
        contigs = "inputs/{sample}.contigs.fasta",
        depths = "1-bam/{sample}.depth.txt"
    output:
        file = "2-metabat-bins/{sample}.completed.txt",
        outdir = directory("2-metabat-bins/{sample}/")
    conda:
        "envs/metabat.yml"
    threads: 
        config['metabat']['threads']
    params:
        prefix = "2-metabat-bins/{sample}/{sample}_bin"
    log: 
        "logs/{sample}.RunMetabat.log"
    benchmark: 
        "benchmarks/{sample}.RunMetabat.tsv"
    shell:
        "metabat2 -i {input.contigs} -a {input.depths} -o {params.prefix} -t {threads} "
        "-v &> {log} && touch {output.file}"
        
rule RunCheckM:
    input:
        metaoutput = "2-metabat-bins/{sample}.completed.txt"
    output:
        "3-checkm/{sample}/lineage.ms"
    conda:
        "envs/checkm.yml"
    threads: 
        config['checkm']['threads']
    params:
        ppthreads = config['checkm']['pplacer_threads'],
        indir = "2-metabat-bins/{sample}/",
        outdir = "3-checkm/{sample}/",
        datapath = config['checkm']['datapath'],
        tmpdir = config['tmpdir']
    log: 
        root = "logs/{sample}.RunCheckM-Root.log",
        run = "logs/{sample}.RunCheckM-Run.log"
    benchmark: 
        "benchmarks/{sample}.RunCheckM.tsv"
    shell:
        "checkm data setRoot {params.datapath} &> {log.root} && checkm lineage_wf -x fa -t {threads} "
        "--pplacer_threads {params.ppthreads} --tmpdir {params.tmpdir} {params.indir} "
        "{params.outdir} &> {log.run}"
        
rule SummarizeCheckM:
    input:
        "3-checkm/{sample}/lineage.ms"
    output:
        "4-checkm-summary/CheckM.{sample}.qa.txt"
    conda:
        "envs/checkm.yml"
    params:
        outdir = "3-checkm/{sample}/"
    log: 
        "logs/{sample}.SummarizeCheckM.log"
    benchmark: 
        "benchmarks/{sample}.SummarizeCheckM.tsv"
    shell:
        "checkm qa -o2 {input} {params.outdir} -f {output} --tab_table &> {log}"

rule PrepBatchFile:
    input:
        sumfile = "4-checkm-summary/CheckM.{sample}.qa.txt",
        indir = "2-metabat-bins/{sample}/"
    output:
        batch = "4-checkm-summary/{sample}.batchfile.txt",
        simple = "4-checkm-summary/CheckM.{sample}.simple.txt"
    conda:
        "envs/python.yml"
    params:
        completeness = config['gtdbtk']['min_completeness'],
        contamination = config['gtdbtk']['max_contamination'],
        contigs = config['gtdbtk']['max_contigs']
    log: 
        "logs/{sample}.PrepBatchFile.log"
    benchmark: 
        "benchmarks/{sample}.PrepBatchFile.tsv"
    shell:
        "python scripts/CheckM-to-batch-GTDB.py -i {input.sumfile} -c {params.completeness} "
        "-m {params.contamination} -g {params.contigs} -p {input.indir} -o {output.batch} "
        "-l {output.simple} &> {log}"

rule RunGTDBTkIndividual:
    input:
        "4-checkm-summary/{sample}.batchfile.txt"
    output:
        directory("5-gtdb-individual/{sample}/align/"),
        directory("5-gtdb-individual/{sample}/classify/"),
        directory("5-gtdb-individual/{sample}/identify/"),
    conda:
        "envs/gtdbtk.yml"
    threads: 
        config['gtdbtk']['threads']
    params:
        ppthreads = config['gtdbtk']['pplacer_threads'],
        gtdbtk_data = config['gtdbtk']['gtdbtk_data'],
        outdir = "5-gtdb-individual/{sample}/",
        tmpdir = config['tmpdir']
    log: 
        "logs/{sample}.RunGTDBTkIndividual.log"
    benchmark: 
        "benchmarks/{sample}.RunGTDBTkIndividual.tsv"
    shell:
        "GTDBTK_DATA_PATH={params.gtdbtk_data:q} gtdbtk classify_wf --batchfile {input} "
        "--out_dir {params.outdir} -x fa --prefix {wildcards.sample} --cpus {threads} "
        "--pplacer_cpus {params.ppthreads} --scratch_dir {params.tmpdir} &> {log}"
        
rule PlotCheckM:
    input:
        "4-checkm-summary/CheckM.{sample}.qa.txt"
    output:
        o1 = "6-summary/{sample}/{sample}-binplots/{sample}-unfiltered-compl-vs-contam.pdf",
        o2 = "6-summary/{sample}/{sample}-binplots/{sample}-unfiltered-compl-vs-contam-contigNums.pdf",
        o3 = "6-summary/{sample}/{sample}-binplots/{sample}-unfiltered-compl-vs-contam-Bins.pdf",
        o4 = "6-summary/{sample}/{sample}-binplots/{sample}-filtered-compl-vs-contam.pdf",
        o5 = "6-summary/{sample}/{sample}-binplots/{sample}-filtered-compl-vs-contam-contigNums.pdf",
        o6 = "6-summary/{sample}/{sample}-binplots/{sample}-filtered-compl-vs-contam-Bins.pdf"
    conda:
        "envs/python.yml"
    params:
        completeness = config['gtdbtk']['min_completeness'],
        contamination = config['gtdbtk']['max_contamination'],
        contigs = config['gtdbtk']['max_contigs']
    log: 
        "logs/{sample}.PlotCheckM.log"
    benchmark: 
        "benchmarks/{sample}.PlotCheckM.tsv"
    shell:
        "python scripts/Metabat-Plot.py -i {input} -l {wildcards.sample} -c {params.completeness} "
        "-m {params.contamination} -g {params.contigs} -o1 {output.o1} -o2 {output.o2} "
        "-o3 {output.o3} -o4 {output.o4} -o5 {output.o5} -o6 {output.o6} &> {log}"
        
rule SummarizeResults:
    input:
        depth = "1-bam/{sample}.depth.txt",
        batch = "4-checkm-summary/{sample}.batchfile.txt",
        checkm = "4-checkm-summary/CheckM.{sample}.simple.txt",
        gtdbdir = "5-gtdb-individual/{sample}/classify/"
    output:
        outfile = "6-summary/{sample}/{sample}.HiFi-MAG.summary.txt"
    conda:
        "envs/python.yml"
    params:
        gtdbtk_data = config['gtdbtk']['gtdbtk_data'],
        outdir = "6-summary/{sample}/{sample}-bin-ref-pairs/"
    log: 
        "logs/{sample}.SummarizeResults.log"
    benchmark: 
        "benchmarks/{sample}.SummarizeResults.tsv"
    shell:
        "python scripts/genome-binning-summarizer.py -d {input.depth} -b {input.batch} "
        "-c {input.checkm} -g {input.gtdbdir} -j {params.gtdbtk_data} -o {output.outfile} "
        "-s {params.outdir} -l {log}"

rule SummaryPlots:
    input:
        "6-summary/{sample}/{sample}.HiFi-MAG.summary.txt"
    output:
        o1 = "6-summary/{sample}/{sample}.Completeness-Contamination-Contigs.pdf",
        o2 = "6-summary/{sample}/{sample}.GenomeSizes-Depths.pdf"
    conda:
        "envs/python.yml"
    log: 
        "logs/{sample}.SummaryPlots.log"
    benchmark: 
        "benchmarks/{sample}.SummaryPlots.tsv"
    shell:
        "python scripts/Summary-Plots.py -i {input} -l {wildcards.sample} -o1 {output.o1} "
        "-o2 {output.o2} &> {log}"
