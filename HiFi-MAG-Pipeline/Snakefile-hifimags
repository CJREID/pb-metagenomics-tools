import os

localrules: 
    ParseContigs, JGIBamDepth, WriteCircularBins, DASinputMetabatLinCirc, DASinputMetabatFull,
    DASinputMaxbin, ConcoctBins, ConcoctRelabel, DASinputConcoct, CheckForBins, CheckmSummarize,
    GTDBTkPrepBatchFile, CheckmPlot, ResultsSummarize, ResultsPlot, all

configfile: "config.yaml"

SAMPLES = config['samplenames']
CWD = os.getcwd()

rule all:
    input:
        expand(os.path.join(CWD, "7-gtdbtk", "{sample}", "{dir}", ""), sample = SAMPLES, dir = ["align", "classify", "identify"]),
        expand(os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-{filt}-compl-vs-{type}.pdf"), sample = SAMPLES, filt = ["unfiltered", "filtered"], type = ["contam", "contam-contigNums", "contam-Bins"]),
        expand(os.path.join(CWD, "8-summary", "{sample}", "{sample}.HiFi-MAG.summary.txt"), sample = SAMPLES),
        expand(os.path.join(CWD, "8-summary", "{sample}", "{sample}.Completeness-Contamination-Contigs.pdf"), sample = SAMPLES),
        expand(os.path.join(CWD, "8-summary", "{sample}", "{sample}.GenomeSizes-Depths.pdf"), sample = SAMPLES)

rule MinimapToBam:
    input:
        reads = os.path.join(CWD, "inputs", "{sample}.fasta"),
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta")
    output:
        os.path.join(CWD, "2-bam", "{sample}.bam")
    conda:
        "envs/samtools.yml"
    threads: 
        config['minimap']['threads']
    log: 
        os.path.join(CWD, "logs", "{sample}.MinimapToBam.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MinimapToBam.tsv")
    shell:
        "minimap2 -a -k 19 -w 10 -I 10G -g 5000 -r 2000 --lj-min-ratio 0.5 "
        "-A 2 -B 5 -O 5,56 -E 4,1 -z 400,50 --sam-hit-only -t {threads} " 
        "{input.contigs} {input.reads} 2> {log} | samtools sort -@ {threads} -o {output}"
        
rule IndexBam:
    input:
        os.path.join(CWD, "2-bam", "{sample}.bam")
    output:
        index = os.path.join(CWD, "2-bam", "{sample}.bam.bai"),
        complete = os.path.join(CWD, "2-bam", "{sample}.index.completed.txt")
    conda:
        "envs/samtools.yml"
    threads: 
        config['minimap']['threads']
    log: 
        os.path.join(CWD, "logs", "{sample}.IndexBam.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.IndexBam.tsv")
    shell:
        "samtools index -@ {threads} {input} &> {log} && touch {output.complete}"

rule ParseContigs:
    input:
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta")
    output:
        fastacircular = os.path.join(CWD, "1-contigs", "{sample}.circular.fasta"),
        fastalinear = os.path.join(CWD, "1-contigs", "{sample}.linear.fasta"),
        logcircular = os.path.join(CWD, "1-contigs", "{sample}.circular.txt"),
        loglinear = os.path.join(CWD, "1-contigs", "{sample}.linear.txt")
    conda:
        "envs/python.yml"
    params: 
        assembler = config['assembler']
    log: 
        os.path.join(CWD, "logs", "{sample}.ParseContigs.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ParseContigs.tsv")
    shell:
        "python scripts/Filter-CircLin-Contigs.py -f {input.contigs} -a {params.assembler} "
        "-o1 {output.fastalinear} -o2 {output.fastacircular} -o3 {output.loglinear} -o4 {output.logcircular} "
        "--metaflye_info inputs/{wildcards.sample}-assembly_info.txt &> {log}"

#############################
# Deal with MetaBat2
     
rule JGIBamDepth:
    input:
        complete = os.path.join(CWD, "2-bam", "{sample}.index.completed.txt"),
        bam = os.path.join(CWD, "2-bam", "{sample}.bam"),
        index = os.path.join(CWD, "2-bam", "{sample}.bam.bai")
    output:
        os.path.join(CWD, "2-bam", "{sample}.JGI.depth.txt")
    conda:
        "envs/metabat.yml"
    log:
        os.path.join(CWD, "logs", "{sample}.JGIBamDepth.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.JGIBamDepth.tsv")
    shell:
        "jgi_summarize_bam_contig_depths --outputDepth {output} {input.bam} 2> {log}"

rule MetabatLinearAnalysis:
    input:
        contigs = os.path.join(CWD, "1-contigs", "{sample}.linear.fasta"),
        depths = os.path.join(CWD, "2-bam", "{sample}.JGI.depth.txt")
    output:
        complete = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}.linear-completed.txt"),
        outdir = directory(os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}", ""))
    conda:
        "envs/metabat.yml"
    threads: 
        config['metabat']['threads']
    params:
        prefix = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}", "metabat.linear")
    log: 
        os.path.join(CWD, "logs", "{sample}.MetabatLinearAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MetabatLinearAnalysis.tsv")
    shell:
        "metabat2 -i {input.contigs} -a {input.depths} -o {params.prefix} -t {threads} "
        "-v &> {log} && touch {output.complete}"

rule WriteCircularBins:
    input:
        fastacircular = os.path.join(CWD, "1-contigs", "{sample}.circular.fasta"),
        file = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}.linear-completed.txt"),
        outdir = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}/")
    output:
        os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}.circular-completed.txt")
    conda:
        "envs/python.yml"
    threads: 
        config['metabat']['threads']
    log: 
        os.path.join(CWD, "logs", "{sample}.WriteCircularBins.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.WriteCircularBins.tsv")
    shell:
        "python scripts/Copy-Circ-Contigs.py -f {input.fastacircular} -s {wildcards.sample} "
        "-o1 {input.outdir} -o2 {output} &> {log}"

rule DASinputMetabatLinCirc:
    input:
        complete_lin = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}.linear-completed.txt"),
        complete_circ = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}.circular-completed.txt"),
        indir = os.path.join(CWD, "3-metabat-bins-linear-circ", "{sample}", "")
    output:
        os.path.join(CWD, "4-DAStool", "{sample}.metabat_linear_circular.tsv")
    conda:
        "envs/dastool.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.DASinputMetabatLinCirc.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.DASinputMetabatLinCirc.tsv")
    shell:
        "Fasta_to_Scaffolds2Bin.sh -i {input.indir} -e fa 1> {output} 2> {log}"

rule MetabatFullAnalysis:
    input:
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta"),
        depths = os.path.join(CWD, "2-bam", "{sample}.JGI.depth.txt")
    output:
        complete = os.path.join(CWD, "3-metabat-bins-full", "{sample}.full-completed.txt"),
        outdir = directory(os.path.join(CWD, "3-metabat-bins-full", "{sample}", ""))
    conda:
        "envs/metabat.yml"
    threads: 
        config['metabat']['threads']
    params:
        prefix = os.path.join(CWD, "3-metabat-bins-full", "{sample}", "metabat.full"),
        min_contig_size = config['metabat']['min_contig_size']
    log: 
        os.path.join(CWD, "logs", "{sample}.MetabatFullAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MetabatFullAnalysis.tsv")
    shell:
        "metabat2 -i {input.contigs} -a {input.depths} -o {params.prefix} -t {threads} "
        "-m {params.min_contig_size} -v &> {log} && touch {output.complete}"

rule DASinputMetabatFull:
    input:
        os.path.join(CWD, "3-metabat-bins-full", "{sample}", "")
    output:
        os.path.join(CWD, "4-DAStool", "{sample}.metabat_full.tsv")
    conda:
        "envs/dastool.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.DASinputMetabatFull.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.DASinputMetabatFull.tsv")
    shell:
        "Fasta_to_Scaffolds2Bin.sh -i {input} -e fa 1> {output} 2> {log}"

##########################################
# Deal with Maxbin2

rule MaxbinDepths:
    input:
        os.path.join(CWD, "2-bam", "{sample}.JGI.depth.txt")
    output:
        os.path.join(CWD, "2-bam", "{sample}.maxbin.depth.txt")
    conda:
        "envs/python.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.MaxbinDepths.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MaxbinDepths.tsv")
    shell:
        "python scripts/Make-maxbin-depths.py -i {input} -o {output} &> {log}"

rule MaxbinAnalysis:
    input:
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta"),
        maxbindepths = os.path.join(CWD, "2-bam", "{sample}.maxbin.depth.txt")
    output:
        complete = os.path.join(CWD, "3-maxbin", "{sample}.complete.txt"),
        summary = os.path.join(CWD, "{sample}.summary")
    conda:
        "envs/maxbin.yml"
    threads: 
        config['maxbin']['threads']
    params:
        min_contig_size = config['maxbin']['min_contig_size']
    log: 
        os.path.join(CWD, "logs", "{sample}.MaxbinAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MaxbinAnalysis.tsv")
    shell: 
        "run_MaxBin.pl -contig {input.contigs} -out {wildcards.sample} "
        "-abund {input.maxbindepths} -min_contig_length {params.min_contig_size} -thread "
        "{threads} &> {log} && touch {output.complete}"

rule MaxbinCleanup:
    input:
        complete = os.path.join(CWD, "3-maxbin", "{sample}.complete.txt"),
        summary = os.path.join(CWD, "{sample}.summary")
    output:
        directory(os.path.join(CWD, "3-maxbin", "{sample}", ""))
    conda:
        "envs/python.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.MaxbinCleanup.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.MaxbinCleanup.tsv")
    shell:
        "python scripts/Maxbin2-organize-outputs.py -s {wildcards.sample} -o {output} &> {log}"

rule DASinputMaxbin:
    input:
        os.path.join(CWD, "3-maxbin", "{sample}", "")
    output:
        os.path.join(CWD, "4-DAStool", "{sample}.maxbin2.tsv")
    conda:
        "envs/dastool.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.DASinputMaxbin.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.DASinputMaxbin.tsv")
    shell:
        "Fasta_to_Scaffolds2Bin.sh -i {input} -e fasta 1> {output} 2> {log}"

#############################
# Deal with Concoct

rule ConcoctCut:
    input:
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta")
    output:
        cut = temp(os.path.join(CWD, "3-concoct", "{sample}.contigs_cut.fasta")),
        bed = temp(os.path.join(CWD, "3-concoct", "{sample}.contigs_cut.bed"))
    conda:
        "envs/concoct.yml"
    threads: 
        1
    params:
        cut_size = config['concoct']['cut_size']
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctCut.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctCut.tsv")
    shell: 
        "cut_up_fasta.py {input.contigs} -c {params.cut_size} -o 0 --merge_last "
        "-b {output.bed} 1> {output.cut} 2> {log} "

rule ConcoctCoverage:
    input:
        bam = os.path.join(CWD, "2-bam", "{sample}.bam"),
        index = os.path.join(CWD, "2-bam", "{sample}.bam.bai"),
        bed = os.path.join(CWD, "3-concoct", "{sample}.contigs_cut.bed")
    output:
        temp(os.path.join(CWD, "3-concoct", "{sample}.coverage_table.tsv"))
    conda:
        "envs/concoct.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctCoverage.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctCoverage.tsv")
    shell:
        "concoct_coverage_table.py {input.bed} {input.bam} 1> {output} 2> {log}"

rule ConcoctAnalysis:
    input:
        cut = os.path.join(CWD, "3-concoct", "{sample}.contigs_cut.fasta"),
        cov = os.path.join(CWD, "3-concoct", "{sample}.coverage_table.tsv")
    output:
        outdir = directory(os.path.join(CWD, "3-concoct", "{sample}", "")),
        csv = os.path.join(CWD, "3-concoct", "{sample}", "clustering_gt{}.csv".format(config['concoct']['min_contig_size']))
    conda:
        "envs/concoct.yml"
    threads: 
        config['concoct']['threads']
    params:
        min_contig_size = config['concoct']['min_contig_size']
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctAnalysis.tsv")
    shell:
        "concoct --composition_file {input.cut} --coverage_file {input.cov} "
        "-l {params.min_contig_size} -b {output.outdir} -t {threads} 2> {log}"

rule ConcoctMerge:
    input:
        os.path.join(CWD, "3-concoct", "{sample}", "clustering_gt{}.csv".format(config['concoct']['min_contig_size']))
    output:
        os.path.join(CWD, "3-concoct", "{sample}", "clustering_merged.csv")
    conda:
        "envs/concoct.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctMerge.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctMerge.tsv")
    shell:
        "merge_cutup_clustering.py {input} 1> {output} 2> {log}"

rule ConcoctBins:
    input:
        merge = os.path.join(CWD, "3-concoct", "{sample}", "clustering_merged.csv"),
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta"),
        outdir = os.path.join(CWD, "3-concoct", "{sample}", "")
    output:
        complete = os.path.join(CWD, "3-concoct", "{sample}", "{sample}.complete.txt")
    conda:
        "envs/concoct.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctBins.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctBins.tsv")
    shell:
        "extract_fasta_bins.py {input.contigs} {input.merge} --output_path {input.outdir} "
        "2> {log} && touch {output.complete}"

rule ConcoctRelabel:
    input:
        complete = os.path.join(CWD, "3-concoct", "{sample}", "{sample}.complete.txt"),
        indir = os.path.join(CWD, "3-concoct", "{sample}", "")
    output:
        organize = os.path.join(CWD, "3-concoct", "{sample}", "{sample}.organized.txt")
    conda:
        "envs/concoct.yml"
    threads: 
        1
    log: 
        os.path.join(CWD, "logs", "{sample}.ConcoctRelabel.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ConcoctRelabel.tsv")
    shell:
        "python scripts/Concoct-organize-outputs.py -i {input.indir} &> {log} "
        "&& touch {output.organize}"

rule DASinputConcoct:
    input:
        indir = os.path.join(CWD, "3-concoct", "{sample}", ""),
        complete = os.path.join(CWD, "3-concoct", "{sample}", "{sample}.complete.txt"),
        organize = os.path.join(CWD, "3-concoct", "{sample}", "{sample}.organized.txt")
    output:
        os.path.join(CWD, "4-DAStool", "{sample}.concoct.tsv")
    conda:
        "envs/dastool.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.DASinputConcoct.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.DASinputConcoct.tsv")
    shell:
        "Fasta_to_Scaffolds2Bin.sh -i {input.indir} -e fa 1> {output} 2> {log}"

#############################
# deal with DAS Tool

rule CheckForBins:
    input:
        lincirc = os.path.join(CWD, "4-DAStool", "{sample}.metabat_linear_circular.tsv"),
        full = os.path.join(CWD, "4-DAStool", "{sample}.metabat_full.tsv")
    output:
        os.path.join(CWD, "4-DAStool", "{sample}.bincheck.txt")
    conda:
        "envs/python.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.CheckForBins.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.CheckForBins.tsv")
    shell:
        "python scripts/CheckBins.py -f {input.full} -l {input.lincirc} -o {output} &> {log}"

rule DAStoolAnalysis:
    input:
        full = os.path.join(CWD, "4-DAStool", "{sample}.metabat_full.tsv"),
        lincirc = os.path.join(CWD, "4-DAStool", "{sample}.metabat_linear_circular.tsv"),
        maxbin = os.path.join(CWD, "4-DAStool", "{sample}.maxbin2.tsv"),
        concoct = os.path.join(CWD, "4-DAStool", "{sample}.concoct.tsv"),
        contigs = os.path.join(CWD, "inputs", "{sample}.contigs.fasta"),
        bincheck = os.path.join(CWD, "4-DAStool", "{sample}.bincheck.txt")
    output:
        binsdir = directory(os.path.join(CWD, "4-DAStool", "{sample}", "{sample}_DASTool_bins", "")),
        complete = os.path.join(CWD, "4-DAStool", "{sample}.complete.txt")
    conda:
        "envs/dastool.yml"
    threads: 
        config['dastool']['threads']
    params:
        outlabel = os.path.join(CWD, "4-DAStool", "{sample}", "{sample}"),
        search = config['dastool']['search'],
        thresh = config['dastool']['score_threshold']
    log: 
        os.path.join(CWD, "logs", "{sample}.DAStoolAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.DAStoolAnalysis.tsv")
    shell:
        "DAS_Tool -i {input.lincirc},{input.full},{input.maxbin},{input.concoct} -c {input.contigs} "
        "-l lincirc,metabat2,maxbin2,concoct -o {params.outlabel} --search_engine {params.search} "
        "--write_bins 1 -t {threads} --score_threshold {params.thresh} --debug "
        "&> {log} && touch {output.complete}"

#############################
# deal with CheckM

rule CheckmAnalysis:
    input:
        complete = os.path.join(CWD, "4-DAStool", "{sample}.complete.txt"),
        indir = os.path.join(CWD, "4-DAStool", "{sample}", "{sample}_DASTool_bins/")
    output:
        os.path.join(CWD, "5-checkm", "{sample}", "lineage.ms")
    conda:
        "envs/checkm.yml"
    threads: 
        config['checkm']['threads']
    params:
        ppthreads = config['checkm']['pplacer_threads'],
        outdir = os.path.join(CWD, "5-checkm", "{sample}", ""),
        datapath = config['checkm']['datapath'],
        tmpdir = config['tmpdir']
    log: 
        root = os.path.join(CWD, "logs", "{sample}.CheckmAnalysisRoot.log"),
        run = os.path.join(CWD, "logs", "{sample}.CheckmAnalysisRun.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.RunCheckM.tsv")
    shell:
        "checkm data setRoot {params.datapath} &> {log.root} && checkm lineage_wf -x fa -t {threads} "
        "--pplacer_threads {params.ppthreads} --tmpdir {params.tmpdir} {input.indir} "
        "{params.outdir} &> {log.run}"
         
rule CheckmSummarize:
    input:
        os.path.join(CWD, "5-checkm", "{sample}", "lineage.ms")
    output:
        os.path.join(CWD, "6-checkm-summary", "CheckM.{sample}.qa.txt")
    conda:
        "envs/checkm.yml"
    params:
        outdir = os.path.join(CWD, "5-checkm", "{sample}", "")
    log: 
        os.path.join(CWD, "logs", "{sample}.CheckmSummarize.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.CheckmSummarize.tsv")
    shell:
        "checkm qa -o2 {input} {params.outdir} -f {output} --tab_table &> {log}"

#############################
# deal with GTDB

rule GTDBTkPrepBatchFile:
    input:
        sumfile = os.path.join(CWD, "6-checkm-summary", "CheckM.{sample}.qa.txt"),
        indir = os.path.join(CWD, "4-DAStool", "{sample}", "{sample}_DASTool_bins", "")
    output:
        batch = os.path.join(CWD, "6-checkm-summary", "{sample}.batchfile.txt"),
        simple = os.path.join(CWD, "6-checkm-summary", "CheckM.{sample}.simple.txt")
    conda:
        "envs/python.yml"
    params:
        completeness = config['gtdbtk']['min_completeness'],
        contamination = config['gtdbtk']['max_contamination'],
        contigs = config['gtdbtk']['max_contigs']
    log: 
        os.path.join(CWD, "logs", "{sample}.GTDBTkPrepBatchFile.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.GTDBTkPrepBatchFile.tsv")
    shell:
        "python scripts/CheckM-to-batch-GTDB.py -i {input.sumfile} -c {params.completeness} "
        "-m {params.contamination} -g {params.contigs} -p {input.indir} -o {output.batch} "
        "-l {output.simple} &> {log}"

rule GTDBTkAnalysis:
    input:
        os.path.join(CWD, "6-checkm-summary", "{sample}.batchfile.txt")
    output:
        directory(os.path.join(CWD, "7-gtdbtk", "{sample}", "align", "")),
        directory(os.path.join(CWD, "7-gtdbtk", "{sample}", "classify", "")),
        directory(os.path.join(CWD, "7-gtdbtk", "{sample}", "identify", "")),
    conda:
        "envs/gtdbtk.yml"
    threads: 
        config['gtdbtk']['threads']
    params:
        ppthreads = config['gtdbtk']['pplacer_threads'],
        gtdbtk_data = config['gtdbtk']['gtdbtk_data'],
        outdir = os.path.join(CWD, "7-gtdbtk", "{sample}", ""),
        tmpdir = config['tmpdir']
    log: 
        os.path.join(CWD, "logs", "{sample}.GTDBTkAnalysis.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.GTDBTkAnalysis.tsv")
    shell:
        "GTDBTK_DATA_PATH={params.gtdbtk_data:q} gtdbtk classify_wf --batchfile {input} "
        "--out_dir {params.outdir} -x fa --prefix {wildcards.sample} --cpus {threads} "
        "--pplacer_cpus {params.ppthreads} --scratch_dir {params.tmpdir} &> {log}"

#############################
# Summarize
        
rule CheckmPlot:
    input:
        os.path.join(CWD, "6-checkm-summary", "CheckM.{sample}.qa.txt")
    output:
        o1 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-unfiltered-compl-vs-contam.pdf"),
        o2 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-unfiltered-compl-vs-contam-contigNums.pdf"),
        o3 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-unfiltered-compl-vs-contam-Bins.pdf"),
        o4 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-filtered-compl-vs-contam.pdf"),
        o5 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-filtered-compl-vs-contam-contigNums.pdf"),
        o6 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-filtered-compl-vs-contam-Bins.pdf")
    conda:
        "envs/python.yml"
    params:
        completeness = config['gtdbtk']['min_completeness'],
        contamination = config['gtdbtk']['max_contamination'],
        contigs = config['gtdbtk']['max_contigs']
    log: 
        os.path.join(CWD, "logs", "{sample}.CheckmPlot.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.CheckmPlot.tsv")
    shell:
        "python scripts/Checkm-Plot.py -i {input} -l {wildcards.sample} -c {params.completeness} "
        "-m {params.contamination} -g {params.contigs} -o1 {output.o1} -o2 {output.o2} "
        "-o3 {output.o3} -o4 {output.o4} -o5 {output.o5} -o6 {output.o6} &> {log}"
        
rule ResultsSummarize:
    input:
        depth = os.path.join(CWD, "2-bam", "{sample}.JGI.depth.txt"),
        batch = os.path.join(CWD, "6-checkm-summary", "{sample}.batchfile.txt"),
        checkm = os.path.join(CWD, "6-checkm-summary", "CheckM.{sample}.simple.txt"),
        gtdbdir = os.path.join(CWD, "7-gtdbtk", "{sample}", "classify", ""),
        plot = os.path.join(CWD, "8-summary", "{sample}", "{sample}-binplots", "{sample}-unfiltered-compl-vs-contam.pdf")
    output:
        outfile = os.path.join(CWD, "8-summary", "{sample}", "{sample}.HiFi-MAG.summary.txt")
    conda:
        "envs/python.yml"
    params:
        gtdbtk_data = config['gtdbtk']['gtdbtk_data'],
        outdir1 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-bin-ref-pairs/"),
        outdir2 = os.path.join(CWD, "8-summary", "{sample}", "{sample}-bins/")
    log: 
        os.path.join(CWD, "logs", "{sample}.ResultsSummarize.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ResultsSummarize.tsv")
    shell:
        "python scripts/genome-binning-summarizer.py -d {input.depth} "
        "-b {input.batch} -c {input.checkm} -g {input.gtdbdir} -j {params.gtdbtk_data} "
        "-o {output.outfile} -o1 {params.outdir1} -o2 {params.outdir2} -l {log}"

rule ResultsPlot:
    input:
        os.path.join(CWD, "8-summary", "{sample}", "{sample}.HiFi-MAG.summary.txt")
    output:
        o1 = os.path.join(CWD, "8-summary", "{sample}", "{sample}.Completeness-Contamination-Contigs.pdf"),
        o2 = os.path.join(CWD, "8-summary", "{sample}", "{sample}.GenomeSizes-Depths.pdf")
    conda:
        "envs/python.yml"
    log: 
        os.path.join(CWD, "logs", "{sample}.ResultsPlot.log")
    benchmark: 
        os.path.join(CWD, "benchmarks", "{sample}.ResultsPlot.tsv")
    shell:
        "python scripts/Summary-Plots.py -i {input} -l {wildcards.sample} -o1 {output.o1} "
        "-o2 {output.o2} &> {log}"
