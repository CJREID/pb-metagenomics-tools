localrules: SplitFasta, MergeSam

configfile: "config.yaml"

SAMPLES = config['samplenames']
CHUNKS = [str(i) for i in list(range(0,config['minimap']['chunks']))]

rule all:
    input:
        expand("4-merged/{sample}.merged.sam", sample = SAMPLES),
        expand("4-merged/{sample}.reads.txt", sample = SAMPLES),
        expand("5-fasta-sort/{sample}.sorted.fasta", sample = SAMPLES),
        expand("6-rma/{sample}.nucleotide.{mode}.rma", sample = SAMPLES, mode = config['sam2rma']['readassignmentmode'])

rule SplitFasta:
    input: 
        "inputs/{sample}.fasta"
    output: 
        temp(expand("1-chunks/{{sample}}.fasta_chunk_000000{piece}", piece = CHUNKS))
    conda:
        "envs/general.yml"
    threads: 1
    benchmark: 
        "benchmarks/{sample}.SplitFasta.tsv"
    params:
        chunks = config['minimap']['chunks']
    shell:
        "fastasplit -c {params.chunks} -f {input} -o 1-chunks/"

rule RunMinimap:
    input:
        "1-chunks/{sample}.fasta_chunk_000000{piece}"
    output:
        temp("2-minimap/{sample}.{piece}.sam")
    conda:
        "envs/general.yml"
    threads: config['minimap']['threads']
    params:
        db = config['minimap']['db'],
        secondary = config['minimap']['secondary']
    log: 
        "logs/{sample}.{piece}.RunMinimap.log"
    benchmark: 
        "benchmarks/{sample}.{piece}.RunMinimap.tsv"
    shell:
        "minimap2 -a -k 19 -w 10 -I 10G -g 5000 -r 2000 -N {params.secondary} "
        "--lj-min-ratio 0.5 -A 2 -B 5 -O 5,56 -E 4,1 -z 400,50 --sam-hit-only "
        "-t {threads} {params.db} {input} 1> {output} 2> {log}"
        
rule SortSam:
    input:
        "2-minimap/{sample}.{piece}.sam"
    output:
        temp("3-sorted/{sample}.{piece}.sorted.sam")
    conda:
        "envs/general.yml"
    threads: 8
    params:
        temp = config['minimap']['tempdir']
    log:
        "logs/{sample}.{piece}.SortSam.log"
    benchmark: 
        "benchmarks/{sample}.{piece}.SortSam.tsv"
    shell:
        "sort -T {params.temp} --parallel=8 -V -k1,1 {input} 1> {output} 2> {log}"

rule MergeSam:
    input:
        expand("3-sorted/{{sample}}.{piece}.sorted.sam", piece = CHUNKS)
    output:
        "4-merged/{sample}.merged.sam"
    conda:
        "envs/general.yml"
    threads: 1
    log: 
        "logs/{sample}.MergeSam.log"
    benchmark: 
        "benchmarks/{sample}.MergeSam.tsv"
    shell:
        "python scripts/sam-merger-minimap.py -i {input} -o {output} -l {log}"

rule ParseSam:
    input:
        "4-merged/{sample}.merged.sam"
    output:
        "4-merged/{sample}.reads.txt"
    conda:
        "envs/general.yml"
    threads: 8
    log: 
        "logs/{sample}.ParseSam.log"
    benchmark: 
        "benchmarks/{sample}.ParseSam.tsv"
    shell:
        "python scripts/Parse-SAM.py -s {input} -o {output} -l {log}"
        
rule SortFasta:
    input:
        fasta = "inputs/{sample}.fasta",
        reads = "4-merged/{sample}.reads.txt"
    output:
        "5-fasta-sort/{sample}.sorted.fasta"
    conda:
        "envs/general.yml"
    threads: 8
    log: 
        "logs/{sample}.SortFasta.log"
    benchmark: 
        "benchmarks/{sample}.SortFasta.tsv"
    shell:
        "python scripts/Sort-Fasta-Records-by-SAM-BioPython.py -f {input.fasta} "
        "-r {input.reads} -o {output} -l {log}"

rule MakeRMA:
    input:
        sam = "4-merged/{sample}.merged.sam",
        reads = "5-fasta-sort/{sample}.sorted.fasta"
    output:
        expand("6-rma/{{sample}}.nucleotide.{mode}.rma", mode = config['sam2rma']['readassignmentmode'])
    conda:
        "envs/general.yml"
    threads: config['sam2rma']['threads']
    params:
        sam2rma = config['sam2rma']['path'],
        db = config['sam2rma']['db'],
        ram = config['sam2rma']['readassignmentmode'],
        mrc = config['sam2rma']['minPercentReadCover']
    log: 
        f"logs/{{sample}}.MakeRMA.{config['sam2rma']['readassignmentmode']}.log"
    benchmark: 
        f"benchmarks/{{sample}}.MakeRMA.{config['sam2rma']['readassignmentmode']}.tsv"
    shell:
        "{params.sam2rma} -i {input.sam} -r {input.reads} -o {output} -lg -alg longReads "
        "-t {threads} -mdb {params.db} -ram {params.ram} -mrc {params.mrc} -v 2> {log}"

