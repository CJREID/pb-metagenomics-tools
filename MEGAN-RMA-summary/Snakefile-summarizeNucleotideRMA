#localrules: 

configfile: "config.yaml"

SAMPLES = config['samplenames']

rule all:
    input:               
        expand("1-r2c/{sample}.{type}.reads.nuc.txt", sample = SAMPLES, type = ["NCBI", "NCBIbac"]),
                
        expand("2-c2c/{sample}.{type}.counts.nuc.txt", sample = SAMPLES, type = ["NCBI", "NCBIbac"]),
        
        expand("3-summaries/Absolute.{type}.counts.nuc.txt", type = ["NCBI", "NCBIbac"]),
                
        "3-summaries/RMA-Full-Summary.nuc.txt",
        
        expand("3-summaries/Normalized.{type}.counts.nuc.txt", type = ["NCBI", "NCBIbac"]),

        "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Total_Reads_Assigned.nuc.pdf",
        "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Percent_Reads_Assigned.nuc.pdf",
        "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Classes_Assigned.nuc.pdf",
        
        expand("4-kraken-mpa-reports/{sample}.megan-nuc-inter.taxnames.txt", sample = SAMPLES),
        expand("4-kraken-mpa-reports/{sample}.megan-nuc-inter.taxids.txt", sample = SAMPLES),
        expand("4-kraken-mpa-reports/{sample}.megan-nuc-RMA-c2c.kreport.txt", sample = SAMPLES),
        expand("4-kraken-mpa-reports/{sample}.megan-nuc-RMA-c2c.mpa.txt", sample = SAMPLES)
        
rule RunR2CforNCBI:
    input:
        f"inputs/{{sample}}{config['rma']['fill']}.rma"
    output:
        temp("1-r2c/{sample}.NCBI.reads.nuc.txt")
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    params:
        rma2info = config['rma2info']['path']
    log: 
        "logs/{sample}.RunR2CforNCBI.nuc.log"
    benchmark: 
        "benchmarks/{sample}.RunR2CforNCBI.nuc.tsv"
    shell:
        "{params.rma2info} -i {input} -o {output} -r2c Taxonomy -n &> {log}"
        
rule RunR2CforNCBIbac:
    input:
        f"inputs/{{sample}}{config['rma']['fill']}.rma"
    output:
        temp("1-r2c/{sample}.NCBIbac.reads.nuc.txt")
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    params:
        rma2info = config['rma2info']['path']
    log: 
        "logs/{sample}.RunR2CforNCBIbac.nuc.log"
    benchmark: 
        "benchmarks/{sample}.RunR2CforNCBIbac.nuc.tsv"
    shell:
        "{params.rma2info} -i {input} -o {output} -r2c Taxonomy -n --bacteriaOnly &> {log}"

rule RunC2CforNCBI:
    input:
        f"inputs/{{sample}}{config['rma']['fill']}.rma"
    output:
        "2-c2c/{sample}.NCBI.counts.nuc.txt"
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    params:
        rma2info = config['rma2info']['path']
    log: 
        "logs/{sample}.RunC2CforNCBI.nuc.log"
    benchmark: 
        "benchmarks/{sample}.RunC2CforNCBI.nuc.tsv"
    shell:
        "{params.rma2info} -i {input} -o {output} -c2c Taxonomy -n -r &> {log}"

rule RunC2CforNCBIbac:
    input:
        f"inputs/{{sample}}{config['rma']['fill']}.rma"
    output:
        "2-c2c/{sample}.NCBIbac.counts.nuc.txt"
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    params:
        rma2info = config['rma2info']['path']
    log: 
        "logs/{sample}.RunC2CforNCBIbac.nuc.log"
    benchmark: 
        "benchmarks/{sample}.RunC2CforNCBIbac.nuc.tsv"
    shell:
        "{params.rma2info} -i {input} -o {output} -c2c Taxonomy -n -r --bacteriaOnly &> {log}"

rule SummarizeNCBI:
    input:
        expand("2-c2c/{sample}.NCBI.counts.nuc.txt", sample = SAMPLES)
    output:
        "3-summaries/Absolute.NCBI.counts.nuc.txt"
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    log: 
        "logs/SummarizeNCBI.nuc.log"
    benchmark: 
        "benchmarks/SummarizeNCBI.nuc.tsv"
    shell:
        "python scripts/RMA-taxonomy-join.py -c {input} -o {output}  &> {log}"

rule SummarizeNCBIbac:
    input:
        expand("2-c2c/{sample}.NCBIbac.counts.nuc.txt", sample = SAMPLES)
    output:
        "3-summaries/Absolute.NCBIbac.counts.nuc.txt"
    conda:
        "envs/general.yml"
    threads: 
        config['rma2info']['threads']
    log: 
        "logs/SummarizeNCBIbac.nuc.log"
    benchmark: 
        "benchmarks/SummarizeNCBIbac.nuc.tsv"
    shell:
        "python scripts/RMA-taxonomy-join.py -c {input} -o {output}  &> {log}"
        
rule SummarizeAllRMA:
    input:
        read_files = expand("1-r2c/{sample}.{type}.reads.nuc.txt", sample = SAMPLES, type = ["NCBI", "NCBIbac"]),
        sum_files = expand("3-summaries/Absolute.{type}.counts.nuc.txt", type = ["NCBI", "NCBIbac"])
    output:
        summary = "3-summaries/RMA-Full-Summary.nuc.txt",
        norm_files = expand("3-summaries/Normalized.{type}.counts.nuc.txt", type = ["NCBI", "NCBIbac"]),
        p2 = "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Total_Reads_Assigned.nuc.pdf",
        p4 = "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Percent_Reads_Assigned.nuc.pdf",
        p6 = "3-summaries/Plots-Summaries/SummaryPlot-Taxonomic_Classes_Assigned.nuc.pdf"
    conda:
        "envs/general.yml"
    threads: 
        config['summary_threads']
    params:
        rcfile = config['readcounts'],
        outdir = "3-summaries/"
    log: 
        "logs/SummarizeAllRMA.nuc.log"
    benchmark: 
        "benchmarks/SummarizeAllRMA.nuc.tsv"
    shell:
        "python scripts/RMA-Summarizer-nuc.py -c {input.read_files} -s {input.sum_files} "
        "-r {params.rcfile} -o {output.summary} -p {params.outdir} &> {log}"

rule UpdateNCBI:
    input:
        expand("2-c2c/{sample}.NCBI.counts.nuc.txt", sample = SAMPLES)
    output:
        dummy = "4-kraken-mpa-reports/NCBI-updated.txt",
        taxdump = temp("taxdump.tar.gz")
    conda:
        "envs/general.yml"
    threads: 
        1
    log: 
        "logs/UpdateNCBI.nuc.log"
    benchmark: 
        "benchmarks/UpdateNCBI.nuc.tsv"
    shell:
        "python scripts/Run_ete3_NCBI_update.py -i {input} -o {output.dummy} &> {log}"

rule MakeKeportMPA:
    input:
        c2c = "2-c2c/{sample}.NCBI.counts.nuc.txt",
        ncbiready = "4-kraken-mpa-reports/NCBI-updated.txt",
        taxdump = "taxdump.tar.gz"
    output:
        inter1 = "4-kraken-mpa-reports/{sample}.megan-nuc-inter.taxnames.txt",
        inter2 = "4-kraken-mpa-reports/{sample}.megan-nuc-inter.taxids.txt",
        kreport = "4-kraken-mpa-reports/{sample}.megan-nuc-RMA-c2c.kreport.txt",
        mpa = "4-kraken-mpa-reports/{sample}.megan-nuc-RMA-c2c.mpa.txt"
    conda:
        "envs/general.yml"
    threads: 
        1
    params:
        rcfile = config['readcounts']
    log: 
        "logs/{sample}.MakeKeportMPA.prot.log"
    benchmark: 
        "benchmarks/{sample}.MakeKeportMPA.prot.tsv"
    shell:
        "python scripts/Convert_MEGAN_RMA_NCBI_c2c-snake.py -i {input.c2c} -o1 {output.inter1} "
        "-o2 {output.inter2} -m {output.mpa} -k {output.kreport} -r {params.rcfile} &> {log}"
